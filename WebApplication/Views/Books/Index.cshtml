@model IEnumerable<BusinessLogic.Model.Book>

@{
    ViewData["Title"] = "Index";
}

<p>
  <a class="btn btn-danger" data-toggle="collapse" href="#collapsing" role="button" aria-expanded="false" aria-controls="collapseExample">
    ВАЖНО
  </a>
</p>
<div class="collapse" id="collapsing">
  <div class="card card-body">
      Авторов вводить нужно через ";" То есть: Лев Николаевич Толстой; Александр Сергеевич Пушкин;<br>
      Это единтсвенная "фича" при работе с данными. <br>
      Это сделано в целях упрощения таблицы в базе данных и упрощения работы с динамически генерируемыми инпутами (а точнее её отсутствие).<br>
      <br>
      Ниже я называю это фичей, потому что воспринял задание так: свежий запуск приложения => получаем пустую таблицу и возможность загрузить файл.<br>
      <br>
      "Фича" при работе с загруженным xml файлом - нужно руками чистить таблицу. Почему см. комментарии в BooksController.
      <br>
      Загрузить ещё данные - возможность объединить несколько xml файлов в один.
      </div>
</div>

<h1>Книжный магазин</h1>
<div class="row">
    @if (Model.Count() == 0)
    {
        <div class="col">
            <a class="btn btn-primary" asp-action="LoadXml">Загрузить XML</a>
        </div>
    }
    else
    {
        <div class="col">
            <a class="btn btn-info" asp-action="LoadXml">Загрузить ещё данные</a>
        </div>
        <div class="col">
            <a class="btn btn-primary" asp-action="Create">Создать новую позицию</a>
        </div>
        <div class="col">
            <a class="btn btn-primary" asp-action="DownLoadHTML">Загрузить HTML</a>
        </div>
        <div class="col">
            <a class="btn btn-primary" asp-action="DownLoadXML">Скачать XML</a>
        </div>
    }
</div>
&nbsp;
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Year)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Language)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cover)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Year)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Language)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cover)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id"><i class="fas fa-edit"></i></a> |
                <a asp-action="Details" asp-route-id="@item.Id"><i class="fas fa-info"></i></a> |
                <a asp-action="Delete" asp-route-id="@item.Id"><i class="fas fa-trash"></i></a>
            </td>
        </tr>
}
    </tbody>
</table>
